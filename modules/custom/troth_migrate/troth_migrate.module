<?php

/**
 * @file
 * Custom functions for the event handling.
 */

use Drupal\Core\Database\Database;
use Drupal\profile\Entity\Profile;
use Drupal\commerce_order\Entity\OrderItem;
use Drupal\commerce_product\Entity\ProductVariation;
use Drupal\commerce_price\Price;
use Drupal\commerce_order\Entity\Order;
use Drupal\commerce_payment\Entity\Payment;

/**
 * Test migration function.
 */
function troth_migrate_test() {
  // Get all product variations.
  $query = \Drupal::entityQuery('commerce_product_variation');
  $varids = $query->execute();
  $variations = [];
  foreach ($varids as $varid) {
    $var = ProductVariation::load($varid);
    $sku = $var->sku->value;
    $type = $var->type->getValue()[0]['target_id'];
    $variations[$sku] = [
      'id' => $varid,
      'type' => $type,
      'var' => $var,
      'title' => $var->title->value,
    ];
  }

  $con = Database::getConnection('default', 'migrate');
  $query = $con->select('commerce_order', 'o')
    ->fields('o')
    ->orderBy('order_id')
    ->range(0, 50);
  $results = $query->execute();
  while ($row = $results->fetchAssoc()) {
    $order_id = $row['order_id'];
    $order = Order::load($order_id);
    $uid = $row['uid'];
    $liquery = $con->select('commerce_line_item', 'li')
      ->fields('li')
      ->condition('li.order_id', $order_id, '=');
    $liresults = $liquery->execute();
    $order_items = [];
    while ($lirow = $liresults->fetchAssoc()) {
      $lid = $lirow['line_item_id'];
      $lipquery = $con->select('field_data_commerce_total', 'p')
        ->fields('p', ['commerce_total_amount', 'commerce_total_currency_code'])
        ->condition('entity_id', $lid, '=');
      $liprice = $lipquery->execute()->fetchAssoc();
      $price = new Price($liprice['commerce_total_amount'] / 100, $liprice['commerce_total_currency_code']);
      $sku = $lirow['line_item_label'];
      $qty = $lirow['quantity'];

      $match = 0;
      if ($order) {
        foreach ($current_items as $k => $v) {
          if (substr($k, 0, strlen($sku)) === $sku) {
            if ($price == $v['price'] && $qty == $v['qty']) {
              $match = 1;
            }
          }
        }
      }
      // Check if the order item exists already.
      $query = \Drupal::entityQuery('commerce_order_item')
        ->condition('order_id', $order_id, '=')
        ->condition('purchased_entity', $variations[$sku]['var']->id(), '=')
        ->condition('unit_price__number', $liprice['commerce_total_amount'] / 100, '=')
        ->condition('unit_price__currency_code', $liprice['commerce_total_currency_code'], '=')
        ->condition('quantity', $qty, '=')
        ->condition('created', $lirow['created'], '=');
      $liids = $query->execute();

      if (count($liids) == 0) {
        $order_item = OrderItem::create([
          'type' => $variations[$sku]['type'],
          'purchased_entity' => $variations[$sku]['var'],
          'title' => $variations[$sku]['title'],
          'quantity' => $qty,
          'unit_price' => $price,
          'created' => $lirow['created'],
          'changed' => $lirow['changed'],
          'data' => $lirow['data'],
        ]);
        $order_item->save();
        $order_items[] = $order_item;
      }
    }

    $query = $con->select('field_revision_commerce_customer_billing', 'b')
      ->condition('entity_id', $order_id, '=')
      ->fields('b', ['commerce_customer_billing_profile_id']);
    $profid = $query->distinct()->execute()->fetchField();
    $query = $con->select('field_revision_commerce_customer_address', 'a')
      ->condition('entity_id', $profid, '=')
      ->fields('a');
    $profdata = $query->execute()->fetchAssoc();
    $address = [
      'country_code' => $profdata['commerce_customer_address_country'],
      'postal_code' => $profdata['commerce_customer_address_postal_code'],
      'locality' => $profdata['commerce_customer_address_locality'],
      'address_line1' => $profdata['commerce_customer_address_thoroughfare'],
      'administrative_area' => $profdata['commerce_customer_address_administrative_area'],
      'given_name' => $profdata['commerce_customer_address_first_name'],
      'family_name' => $profdata['commerce_customer_address_last_name'],
      'dependent_locality' => $profdata['commerce_customer_address_dependent_locality'],
      'address_line2' => $profdata['commerce_customer_address_premise'],
      'organization' => $profdata['commerce_customer_address_organisation_name'],
    ];
    if ($order) {
      $profile = Profile::load($order->billing_profile->target_id);
      $profile->setOwnerId($uid);
      $profile->address->country_code = $address['country_code'];
      $profile->address->administrative_area = $address['administrative_area'];
      $profile->address->locality = $address['locality'];
      $profile->address->dependent_locality = $address['dependent_locality'];
      $profile->address->postal_code = $address['postal_code'];
      $profile->address->address_line1 = $address['address_line1'];
      $profile->address->address_line2 = $address['address_line2'];
      $profile->address->organization = $address['organization'];
      $profile->address->given_name = $address['given_name'];
      $profile->address->family_name = $address['family_name'];
    }
    else {

      $profile = Profile::create([
        'type' => 'customer',
        'uid' => $uid,
        'status' => TRUE,
        'address' => $address,
      ]);

    }
    $profile->save();
    if ($order) {
      if (count($order_items) > 0) {
        foreach ($order_items as $item) {
          $order->addItem($item);
        }
      }
      $order->setEmail($row['mail']);
      $order->setIpAddress($row['hostname']);
      $order->state = $row['status'];
      $order->setRefreshState('refresh_on_save');
    }
    else {
      $order = Order::create([
        'order_id' => $order_id,
        'type' => 'default',
        'state' => $row['status'],
        'mail' => $row['mail'],
        'uid' => $uid,
        'ip_address' => $row['hostname'],
        'order_number' => $order_id,
        'billing_profile' => $profile,
        'store_id' => 1,
        'order_items' => $order_items,
        'placed' => $row['created'],
        'created' => $row['created'],
        'data' => $row['data'],
      ]);
    }
    $order->save();

    // Get payments.
    $query = $con->select('commerce_payment_transaction', 'p')
      ->fields('p')
      ->condition('order_id', $order_id, '=');
    $payresult = $query->execute();

    while ($payrow = $payresult->fetchAssoc()) {
      // Check if the payment exists already.
      $query = \Drupal::entityQuery('commerce_payment')
        ->condition('order_id', $order_id, '=')
        ->condition('amount__number', $payrow['amount'] / 100, '=')
        ->condition('amount__currency_code', $payrow['currency_code'], '=')
        ->condition('remote_id', $payrow['remote_id'], '=')
        ->condition('remote_state', $payrow['remote_status'], '=')
        ->condition('completed', $payrow['changed'], '=');
      $pids = $query->execute();

      if (count($pids) == 0) {
        $price = new Price($payrow['amount'] / 100, $payrow['currency_code']);

        $payment = Payment::create([
          'type' => 'paypal_checkout',
          'payment_gateway' => 'paypal_sandbox',
          'order_id' => $order->id(),
          'amount' => $price,
          'state' => 'completed',
          'remote_id' => $payrow['remote_id'],
          'payment_method' => $payrow['payment_method'],
          'remote_state' => $payrow['remote_status'],
          'completed' => $payrow['changed'],

        ]);
        $payment->save();
      }
    }
  }
}
